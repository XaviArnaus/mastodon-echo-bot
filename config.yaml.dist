###########################
#    Mastodon Echo Bot    #
###########################

# App Info
app:
  name: "Echo"
  api_base_url: "https://mastodon.social"
  client_credentials: "client.secret"
  user_credentials: "user.secret"
  user:
    email: "bot+echo@my-fancy.site"
    password: "SuperSecureP4ss"

# Logging config
logger:
  # [Integer] Log level: NOTSET=0 | DEBUG=10 | INFO=20 | WARN=30 | ERROR=40 | CRITICAL=50
  loglevel: 10
  # [String] Name of the logger
  name: "mastodon_echo_bot"
  # [Bool] Dump the log into a file
  to_file: True
  # [String] Path and filename of the log file
  filename: "log/mastodon_echo_bot.log"
  # [Bool] Dump the log into a stdout
  to_stdout: True
  # [String] Format of the log
  format: "[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s"

# Janitor config
janitor:
  # [Bool] Use it. Defaults to false
  active: False
  # [String] URL with port where the messages will be delivered
  remote_url: http://remote_url:5000

# Storage for the toots queue registry
toots_queue_storage:
  # [String] Where to store it
  file: "storage/toots_queue.yaml"

# The Mastodon Parser, in charge to query the defined accounts and get their toots
mastodon_parser:
  # [String] Where to store the accounts registry
  storage_file: "storage/accounts.yaml"
  # [Bool] Ignore other visibility. If False it relays on visibility of the authenticated bot.
  only_public_visibility: True
  # [Bool] Ignore the last seen toot. If True will parse always all.
  ignore_toots_offset: False
  # [List of Objects] Which accounts to parse
  accounts:
    -
      # [String] Full user notation
      user: "@me@mastodon.social"
      # [Bool] Queue the own toots?
      toots: False
      # [Bool] Queue the retoots done?
      retoots: True
      # [String|None]
      keywords_filter_profile: "talamanca"
      # [Bool] Automatically follow this account if the bot is not doing so already?
      # This helps retreiving toots from federated server's accounts,
      #   when the account is not being followed yet in this server.
      # The follow will be WITH reblogs
      auto_follow: True
      # [Int] Max summary length. Default 300
      max_summary_length: 400

# The Feed Parser, in charge to query the defined feeds and get their posts
feed_parser:
  # [String] Where to store the feeds registry
  storage_file: "storage/feeds.yaml"
  # [List of Objects]
  sites:
    -
      # [String] Name of this site. Will be used as {origin} in the toot
      name: "News"
      # [String] URL of the feed to parse
      url: "https://www.example.cat/rss/my_feed"
      # [String] 
      language_default: "ca_ES"
      # [String|None]
      keywords_filter_profile: "talamanca"
      # [Bool] Shows an initial line wit the name of the site like "{name}:\n"
      show_name: True

twitter_parser:
  # [String] Bearer token from Twitter.
  bearer_token: "my-super-long-bearer-token-that-comes-from-registering-in-twitter-development"
  # [String] Where to store the twits registry
  storage_file: "storage/twitter_accounts.yaml"
  # [Bool] Ignore the last seen twit. If True will parse always all.
  ignore_tweets_offset: True
  # [Integer] How many tweets maximum to retrieve per user. 100 >= x >= 5
  max_tweets_to_retrieve: 10
  # [List of Objects] Which accounts to parse
  accounts:
    -
      # [String] User notation, including the @ char
      user: "@me"
      # [Bool] Queue the own tweets?
      tweets: True
      # [Bool] Queue replies?
      replies: False
      # [Bool] Queue the retweets?
      retweets: True
      # [Bool] Queue the quotes?
      quotes: True

publisher:
# [String] Where to download the media to
  media_storage: "storage/media/"
  # [Bool] Performs a dry run: the queue is untouched and no re-toot is really done
  # Check the logs/stdout to see the results
  dry_run: True
  # [Bool] Publish only the older post
  # Useful if we have this boot executed often, so publishes a single toot in every run
  only_older_toot: True

keywords_filter:
  # [Dict] Profiles that contain the rules for keywords filtering
  profiles:
    # Profiles as dict
    "talamanca": 
        # All strings must be:
        #  lowercase
        #  mapped chars (accents, ç -> c, ñ -> n)
        #  cleaned chars (-.')
        keywords:
          - "talamanca"
          - "mura"
          - "rocafort"
          - "navarcles"
          - "sant fruitos"
          - "st fruitos"
          - "montcau"
          - "bv1221"
          - "sant llorenc del munt"
          - "st llorenc"
